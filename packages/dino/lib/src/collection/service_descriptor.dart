import 'package:dino/src/provider/service_provider.dart';

/// Represents a lifetime of the service.
enum ServiceLifetime {
  /// The service is created once and used accross all scopes.
  singleton,

  /// The service is created once for each scope.
  scoped,

  /// The service is created for each service resolution.
  transient,
}

/// A factory for creating services of specified type using [ServiceProvider].
typedef ServiceFactory<TService extends Object> = TService Function(
  ServiceProvider provider,
);

/// Describes a service.
class ServiceDescriptor {
  ServiceDescriptor._(
    this.serviceType,
    this.lifetime,
    this.implementationFactory,
    this.implementationInstance,
    this.implementationAlias,
    this.isGenerated,
  );

  /// The type of the service used to resolve it.
  final Type serviceType;

  /// The lifetime of the service.
  final ServiceLifetime lifetime;

  /// The factory used to create the service.
  final Object Function(ServiceProvider sp)? implementationFactory;

  /// The singleton instance of the service.
  final Object? implementationInstance;

  /// The type of the aliased service.
  final Type? implementationAlias;

  /// Indicates whether the implementation of the service is generated by
  /// the dino generator or registered manually.
  final bool isGenerated;

  /// Creates a service descriptor for the specified [TService] type
  /// with specified [lifetime] and [implementationFactory].
  static ServiceDescriptor factory<TService extends Object>(
    ServiceLifetime lifetime,
    ServiceFactory<TService> factory, [
    bool isGenerated = false,
  ]) {
    return ServiceDescriptor._(
      TService,
      lifetime,
      factory,
      null,
      null,
      isGenerated,
    );
  }

  /// Creates a singleton service descriptor for the specified [TService] type
  /// with specified [implementationInstance].
  static ServiceDescriptor instance<TService extends Object>(
    TService instance,
  ) {
    return ServiceDescriptor._(
      TService,
      ServiceLifetime.singleton,
      null,
      instance,
      null,
      false,
    );
  }

  /// Creates a transient service descriptor for the specified [TService] type
  /// implemented as an alias of the specified [TImplementation] type.
  /// [TImplementation] must implement [TService].
  static ServiceDescriptor
      alias<TService extends Object, TImplementation extends Object>([
    bool isGenerated = false,
  ]) {
    return ServiceDescriptor._(
      TService,
      ServiceLifetime.transient,
      null,
      null,
      TImplementation,
      isGenerated,
    );
  }
}
